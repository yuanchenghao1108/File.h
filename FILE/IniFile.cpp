
// -------------------------------------------------------------------------------
#include "TINI.h"
// -------------------------------------------------------------------------------
TINI::TINI(void) {
	// --------------------------------------------------------
	// --------------------------------------------------------
}

// -------------------------------------------------------------------------------
TINI::~TINI(void) {
	// --------------------------------------------------------
	// --------------------------------------------------------
}

// -------------------------------------------------------------------------------
void __fastcall TINI::_init_all_vars(bool is_first) {
	// --------------------------------------------------------
	if (is_first) {
	}
	// --------------------------------------------------------
	memset(m_szKey, 0, CONFIGLEN);
	m_Map.clear();
	// --------------------------------------------------------
}

// -------------------------------------------------------------------------------
void __fastcall TINI::_init_all_ptr() {
	// --------------------------------------------------------  
	m_fp = NULL;
	// --------------------------------------------------------
}

// -------------------------------------------------------------------------------
/******************************************************************************
* 功  能：打开文件函数
* 参  数：无
* 返回值：
* 备  注：
******************************************************************************/
int __fastcall TINI::LoadFile(const char* filename) {
	// --------------------------------------------------------
	string szLine, szMainKey, szLastMainKey, szSubKey;
	char strLine[CONFIGLEN] = { 0 };
	KEYMAP mLastMap;
	int  nIndexPos = -1;
	int  nLeftPos = -1;
	int  nRightPos = -1;
	// --------------------------------------------------------
	m_fp = fopen(filename, "r+");
	if (m_fp == NULL)
	{
		printf("open inifile %s error!\n", filename);
		return INI_OPENFILE_ERROR;
	}
	// --------------------------------------------------------
	m_Map.clear();
	// --------------------------------------------------------
	while (fgets(strLine, CONFIGLEN, m_fp))
	{
		// ----------------------------------------------------
		szLine.assign(strLine);
		// ----------------------------------------------------
		//判断注释
		if (_trim(szLine.c_str()).find_first_not_of(";") == 1) {
			continue;
		}
		// ----------------------------------------------------
		//删除字符串中的非必要字符  
		if (nLeftPos = szLine.find("\n"),string::npos != nLeftPos)
		{
			szLine.erase(nLeftPos, 1);
		}
		if (nLeftPos = szLine.find("\r"),string::npos != nLeftPos)
		{
			szLine.erase(nLeftPos, 1);
		}
		// ----------------------------------------------------
		//判断是否是主键  
		nLeftPos = szLine.find("[");
		nRightPos = szLine.find("]");
		// ----------------------------------------------------
		if (nLeftPos != string::npos && nRightPos != string::npos)
		{
			// ------------------------------------------------
			szLine.erase(nLeftPos, 1);
			//nRightPos--;
			szLine.erase(nRightPos, 1);
			// ------------------------------------------------
			m_Map[szLastMainKey] = mLastMap;
			// ------------------------------------------------
			mLastMap.clear();
			// ------------------------------------------------
			szLastMainKey = szLine;
			// ------------------------------------------------
		}
		else
		{
			// ------------------------------------------------
			//是否是子键  
			if (nIndexPos = szLine.find("="), string::npos != nIndexPos)
			{
				// --------------------------------------------
				string szSubKey = szLine.substr(0, nIndexPos);
				// --------------------------------------------
				string szSubValue = szLine.substr(nIndexPos + 1, szLine.length() - nIndexPos - 1);
				// --------------------------------------------
				mLastMap[szSubKey] = szSubValue;
				// --------------------------------------------
			}
			/*else
			{
				// --------------------------------------------
				//TODO:不符合ini键值模板的内容 如注释等  
				// --------------------------------------------
			}*/
			// ------------------------------------------------
		}
		// ----------------------------------------------------

	}//while-loop	 
	// --------------------------------------------------------
	//插入最后一次主键 
	m_Map[szLastMainKey] = mLastMap;
	// --------------------------------------------------------
	return INI_SUCCESS;
}

// -------------------------------------------------------------------------------
/******************************************************************************
* 功  能：关闭文件函数
* 参  数：无
* 返回值：
* 备  注：
******************************************************************************/
INI_RES __fastcall TINI::UnLoadFile(void) {
	// --------------------------------------------------------
	if (m_fp != NULL)
	{
		fclose(m_fp);
		m_fp = NULL;
	}
	// --------------------------------------------------------
	return INI_SUCCESS;
}

// -------------------------------------------------------------------------------
int __fastcall TINI::LoadFileFromStream() {

}
// -------------------------------------------------------------------------------
/******************************************************************************
* 功  能：获取[SECTION]下的某一个键值的字符串
* 参  数：
*  char* mAttr  输入参数    主键
*  char* cAttr  输入参数 子键
*  char* value  输出参数 子键键值
* 返回值：
* 备  注：
******************************************************************************/
INI_RES __fastcall TINI::_get_key(const char* mAttr, const char* cAttr, char* value) {
	// --------------------------------------------------------
	KEYMAP mKey = m_Map[mAttr];
	// --------------------------------------------------------
	string sTemp = mKey[cAttr];
	// --------------------------------------------------------
	if (!sTemp.empty()) {
		// ----------------------------------------------------
		strncpy(value, sTemp.c_str(), sTemp.length());
		// ----------------------------------------------------
		return INI_SUCCESS;
	}
	else {
		return INI_NO_ATTR;
	}
	// --------------------------------------------------------	
}

// -------------------------------------------------------------------------------
string  __fastcall TINI::_trim(const char* source) {
	// --------------------------------------------------------	
	string str;
	// --------------------------------------------------------	
	str.assign(source);
	// --------------------------------------------------------	
	if (!str.empty()) {
		str.erase(str.find_last_not_of(" ") + 1);
		str.erase(str.find_first_not_of(" "));
	}
	// --------------------------------------------------------	
	return str;
	// --------------------------------------------------------	

}

// -------------------------------------------------------------------------------
/******************************************************************************
* 功  能：获取整形的键值
* 参  数：
*mAttr                     主键
*cAttr                     子键
*def_value				   默认值
* 返回值：正常则返回对应的数值 未读取成功则返回0(键值本身为0不冲突)
* 备  注：
******************************************************************************/
int __fastcall TINI::ReadInt(const char* mAttr, const char* cAttr, int def_value) {
	// --------------------------------------------------------
	int nRes = 0;
	// --------------------------------------------------------
	memset(m_szKey, 0, sizeof(m_szKey));
	// --------------------------------------------------------
	if (INI_SUCCESS == _get_key(mAttr, cAttr, m_szKey))
	{
		nRes = atoi(_trim(m_szKey).c_str());
	}
	else {
		nRes = def_value;
	}
	// --------------------------------------------------------
	return nRes;
}

// -------------------------------------------------------------------------------
/******************************************************************************
*功  能：获取键值的字符串 
* 参  数：
*mAttr                     主键
*cAttr                     子键
*def_value				   默认值
* 返回值：正常则返回对应的数值 未读取成功则返回0(键值本身为0不冲突)
* 备  注：
****************************************************************************** */
char * __fastcall TINI::ReadString(const char* mAttr, const char* cAttr, string def_value) {
	// --------------------------------------------------------
	memset(m_szKey, 0, sizeof(m_szKey));
	// --------------------------------------------------------
	if (INI_SUCCESS != _get_key(mAttr, cAttr, m_szKey))
	{
		strncpy(m_szKey, def_value.c_str(), def_value.length());
	}
	// --------------------------------------------------------
	return m_szKey;
}

// -------------------------------------------------------------------------------
